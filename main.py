# Generated by Selenium IDE
#import pytest
import time
import random
import smtplib
import sys
import os
import datetime
from pathlib import Path

from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait
from selenium.webdriver.support.expected_conditions import presence_of_element_located
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.desired_capabilities import DesiredCapabilities
from selenium.webdriver.firefox.options import Options
from selenium.webdriver.firefox.firefox_binary import FirefoxBinary

class TestInit():

  def setup(self, mail_user, mail_pass, edu_user, edu_pass):
    #self.send_mail("Startup service")
    self.mail_user = mail_user
    self.mail_pass = mail_pass
    self.edu_user = edu_user
    self.edu_pass = edu_pass

    options = Options()
    options.headless = True

    gecko_path = './geckodriver'
    if 'GECKODRIVER_PATH' in os.environ: 
      gecko_path = os.environ['GECKODRIVER_PATH']
    if 'FIREFOX_BIN' in os.environ: 
      binary = FirefoxBinary(os.environ['FIREFOX_BIN'])
      self.driver = webdriver.Firefox(firefox_binary=binary, options=options, executable_path='./geckodriver')
    else:
      self.driver = webdriver.Firefox(options=options, executable_path='./geckodriver')
  
  def teardown(self):
    self.driver.quit()
  
  def test(self):
    try:
      print("1 Initializing")
      wait = WebDriverWait(self.driver, 30)
      # Test name: init
      # Step # | name | target | value

      # 2 | open | / | 
      print("2 Opening browser... Waiting till fully loaded")
      time.sleep(random.uniform(5, 9)) 
      self.driver.get("https://my.schooly.co.il/")

      # 2 | setWindowSize | 1085x691 | 
      # self.driver.set_window_size(1085, 691)

      # 3 | wait until the initial login selection screen somes and click it
      wait.until(presence_of_element_located((By.CSS_SELECTOR, ".btn > img")))
      print("3 Login page loaded... Waiting 3-5 sec before click")
      time.sleep(random.uniform(3, 5)) 
      self.driver.find_element(By.CSS_SELECTOR, ".btn > img").click()

      try:
        # 4 | wait until the MOE login page comes up and click the username box
        wait.until(presence_of_element_located((By.ID, "blocker")))
        print("4 MOE Login page loaded... Waiting 4-6 sec before click username")
        time.sleep(random.uniform(4, 6)) 
        self.driver.find_element(By.ID, "blocker").click()
      except Exception as e: 
        print("Error: ", str(e))
        return "Failed probably due to reCaptcha with error: " + str(e)


      # 5 | type username
      print("5 Clicked... Waiting 2-4 sec before entering username")
      time.sleep(random.uniform(2, 4)) 
      self.driver.find_element(By.ID, "HIN_USERID").send_keys(self.edu_user)

      # 6 | click password box
      print("6 Entered... Waiting 4-6 sec before clicking password")
      time.sleep(random.uniform(4, 6)) 
      self.driver.find_element(By.ID, "Ecom_Password").click()

      # 7 | type password
      print("7 Clicked... Waiting 3-5 sec before entering password")
      time.sleep(random.uniform(3, 5)) 
      self.driver.find_element(By.ID, "Ecom_Password").send_keys(self.edu_pass)

      # 8 | click login button
      print("8 Entered... Waiting 2-4 sec before clicking login button")
      time.sleep(random.uniform(2, 4)) 
      self.driver.find_element(By.ID, "loginButton2").click()

      # 9 | click health button
      print("9 Post-login... Waiting 3-5 sec before clicking health")
      wait.until(presence_of_element_located((By.CSS_SELECTOR, "#C span")))
      time.sleep(random.uniform(3, 5)) 
      self.driver.find_element(By.CSS_SELECTOR, "#C span").click()

      # 10 | selectFrame | index=0 | 
      print("10 Health page loaded... Waiting 3-5 sec before signing health")
      time.sleep(random.uniform(3, 5)) 
      self.driver.switch_to.frame(0)

      # 11 | mouseDownAt | css=canvas | 236,79
      print("11 Start signing... Waiting 0-3 sec before finish")
      time.sleep(random.uniform(0, 1)) 
      element = self.driver.find_element(By.CSS_SELECTOR, "canvas")
      actions = ActionChains(self.driver)
      actions.move_to_element(element).click_and_hold().perform()

      # 12 | mouseMoveAt | css=canvas | 236,79
      print("12 Still signing... Waiting 0-2 sec before finish")
      time.sleep(random.uniform(0, 1)) 
      element = self.driver.find_element(By.CSS_SELECTOR, "canvas")
      actions = ActionChains(self.driver)
      actions.move_to_element(element).perform()

      # 13 | mouseUpAt | css=canvas | 236,79
      print("13 Finish signing... Waiting 0-1 sec before finish")
      time.sleep(random.uniform(0, 1)) 
      element = self.driver.find_element(By.CSS_SELECTOR, "canvas")
      actions = ActionChains(self.driver)
      actions.move_to_element(element).release().perform()

      # 14 | click | css=canvas | 
      print("14-15 Finished signing... Waiting 3-5 sec before submit")
      time.sleep(random.uniform(1, 2)) 
      self.driver.find_element(By.CSS_SELECTOR, "canvas").click()
      # 15 | click | css=.css-1dbjc4n:nth-child(2) > .css-18t94o4 > .css-901oao | 
      time.sleep(random.uniform(2, 3)) 
      self.driver.find_element(By.CSS_SELECTOR, ".css-1dbjc4n:nth-child(2) > .css-18t94o4 > .css-901oao").click()

      # 16 | selectFrame | relative=parent | 
      print("16-18 Finished submit... Waiting 3-5 sec before logout")
      time.sleep(random.uniform(2, 3)) 
      self.driver.switch_to.default_content()
      # 17 | click | css=.mdi-logout | 
      time.sleep(random.uniform(1, 2)) 
      self.driver.find_element(By.CSS_SELECTOR, ".mdi-logout").click()
      # 18 | runScript | window.scrollTo(0,0) | 
      self.driver.execute_script("window.scrollTo(0,0)")

      time.sleep(20) 
      print("SUCCESS!")
      return "Successfuly signed the health statement!"
    except Exception as e: 
      print("Error: ", str(e))
      return "Failed with error: " + str(e)
        

  def send_mail(self, msg):
    fromaddr = self.mail_user
    toaddrs  = self.mail_user
    subj = 'Message from Health Bot'
    # Prepare actual message
    message = """From: %s\nTo: %s\nSubject: %s\n\n%s
    """ % (fromaddr, toaddrs, subj, msg)

    username = self.mail_user
    password = 'aslzuazmuvgwvpwt'
    server = smtplib.SMTP('smtp.gmail.com:587')
    server.ehlo()
    server.starttls()
    server.login(username,password)
    server.sendmail(fromaddr, toaddrs, message)
    server.quit()


# 
# password = ''
# for line in sys.stdin():
#     password = line.rstrip()

args = []
if len(sys.argv) == 1:
  cred_file = Path("creds")
  if cred_file.is_file():
    import fileinput
    args.append("_")
    for line in fileinput.input(files=('creds')):
        args.append(line.rstrip())
  else:
    args.append("_")
    args.append(os.environ['MAIL_USER'])
    args.append(os.environ['MAIL_PASS'])
    args.append(os.environ['MOE_USER'])
    args.append(os.environ['MOE_PASS'])

else:
  args = sys.argv


if datetime.datetime.today().weekday() < 6:
  test = TestInit()
  result = 'Test not run'
  test.setup(args[1], args[2], args[3], args[4]) #password)
  result = test.test()
  test.teardown()
  test.send_mail("Finished with message:\n" + result)